/*  searchBar should be container because it will make API call
    and change state of other component
*  
  bind,  call, apply -- read on react docs
  apply, call gets executed immediately

*/

/*
Work flow top level:
user type in search Term, hit submit
-> onSubmitForm() called
-> calls bindactionCreator 
-> calls fetchWeather action and pass in this.state.term
-> in fetchWeather action 
-> calls axios to make AJAX call to weather API thru the request URL 
-> request return Promise object
-> action return redux-promise object
*/

import React, {Component} from 'react';
import { connect } from 'react-redux';
// connect function , react-redux is the middle bridge / glue between react and redux
import { fetchWeather } from '../actions/index';
import { bindActionCreators } from 'redux';
// bind the action (fetchWeather) to this container as property of its own
// bindActionCreator make sure that action that generated by actionCreator will flow thru
// different reducers

class SearchBar extends Component{

    constructor(props){
        //console.log('searchBar constructor loading...');
        super(props);
        this.state={term: ''};  // component state only, initial searchTerm is empty
        // this.onInputChange = this.onInputChange.bind(this); // this line explicitly bind onInputChange to this (SearchBar)
        // this.onSubmitForm = this.onSubmitForm.bind(this);
    }

    /* if you don't use arrow function, this will broke, it cannot point to searchBar react component 
    solution: either arrow function, or use bind this
    */
    onInputChange(event){ // all handler should take event parameter, which is vanilla js not react feature
        //console.log('user typed in:'+event.target.value);
        this.setState({term: event.target.value});
    }
    // onInputChange = () => {}

    /* without this press Enter / Submit will re-render the page, so prevent this from happening. */
    onSubmitForm(event){
        event.preventDefault();
        // we need to go and fetch weather data
        //console.log('what is state.term:'+this.state.term);
        this.props.fetchWeather(this.state.term); // the city comes from term
        //this.setState({term: ''}); // clear state after fetch
    }

    render(){
       // console.log( 'searchBar->render()->called')
        return (
            // you can also bind(this) inline in your input tag like below, it does same thing as above
            <form onSubmit={this.onSubmitForm.bind(this)} className="searchForm">
                <input
                    placeholder="Type your favorite city name"
                    className={`form-control sBar`}
                    value={this.state.term}
                    onChange={this.onInputChange.bind(this)}
                />
                <input type="submit" className="btn btn-primary" value="Submit"/>
                
            </form>
        )
    }    
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators({fetchWeather}, dispatch );
    // bindActionCreator with dispath make sure action flow down thru middleware ( in this case: fetchWeather )
}

// searchBar is react container, it needs to connect to redux to be able to receive payload from reducers!
// use connect
export default connect(null,mapDispatchToProps)(SearchBar); // by passing null, we serve purpose of passing mapDispatchToProps
// ignored mapStateToProps